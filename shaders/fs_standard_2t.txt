#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define MAX_POINT_LIGHTS 10
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 fragPos, vec3 viewDir) {
    vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
    return (ambient + diffuse + specular);
}

void main() {
    vec3 norm = normalize(aNormal);
    vec3 viewDir = normalize(viewPos - aPos);
    vec3 lighting = vec3(0.0);

    for(int i = 0; i < numLights; i++) {
        lighting += CalcPointLight(lights[i], norm, aPos, viewDir);
    }

    vec4 texColor1 = texture(first_texture, aTexCoord);
    vec4 texColor2 = texture(second_texture, aTexCoord); // If you have movingTexCoord, use it here

    vec4 litTexColor1 = vec4(lighting, 1.0) * texColor1;
    vec4 litTexColor2 = vec4(lighting, 1.0) * texColor2; // Adjust brightness if needed

    fragColor = mix(litTexColor1, litTexColor2, 1); // Adjust blend factor if needed
}
