#version 330 core

in vec3 FragPos;       // World position from vertex shader
in vec3 Normal;        // World normal from vertex shader
in vec2 TexCoord;      // Texture coordinate from vertex shader

out vec4 FragColor;    // Final color output

uniform sampler2D first_texture;   // First texture sampler
uniform sampler2D second_texture;  // Second texture sampler

// Add uniforms for lighting if needed
uniform vec3 lightPos; // Example light position
uniform vec3 viewPos;  // Camera position

void main()
{
    // Texture mixing logic (for example, mix based on some condition or use TexCoord)
    vec4 texColor1 = texture(first_texture, TexCoord);
    vec4 texColor2 = texture(second_texture, TexCoord);
    vec4 finalColor = mix(texColor1, texColor2, 0.5); // Simple mix; adjust logic as needed

    // Basic lighting (if needed)
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * finalColor.rgb;

    // Combine lighting with texture color
    FragColor = vec4(diffuse, finalColor.a);
}
