#version 330 core

// Vertex Shader input
in vec3 aPos;                                                          // Vertex position
in vec3 aNormal;                                                       // Vertex normal
in vec2 aTexCoord;                                                     // Texture coordinate for first texture
in vec2 movingTexCoord;                                                // Texture coordinate for second moving texture

// Fragment Shader output
out vec4 fragColor;                                                    // Final color output of the fragment shader

// Uniforms (constant during a draw call)
uniform vec3 viewPos;                                                  // Camera/View position
uniform sampler2D first_texture;                                       // First texture sampler
uniform sampler2D second_texture;                                      // Second texture sampler
uniform float lightIntensityScale;                                     // Scale factor for light intensity


// Light structure and uniforms

struct Light {
  vec3 position;                                                      // Light position in the world
  vec3 ambient;                                                       // Ambient color component of the light
  vec3 diffuse;                                                       // Diffuse color component of the light
  vec3 specular;                                                      // Specular color component of the light
};

#define MAX_POINT_LIGHTS 10  
uniform Light lights[MAX_POINT_LIGHTS];                               // Array of lights
uniform int numLights;                                                // Number of active lights

// Material structure and uniform
struct Material {
  vec3 ambient;                                                      // Ambient reflectivity
  vec3 diffuse;                                                       // Diffuse reflectivity
  vec3 specular;                                                     // Specular reflectivity
  float shininess;                                                  // Specular shininess factor
}; 
  
uniform Material material;                                          // Material properties

// Function to calculate lighting from a single point light source

vec3 CalcPointLight(Light light, vec3 norm, vec3 fragPos, vec3 viewDir) {
    // Ambient component
    vec3 ambient = light.ambient * texture(first_texture, aTexCoord).rgb;

    // Diffuse component
    vec3 lightDir = normalize(light.position - fragPos);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(first_texture, aTexCoord).rgb;
  
    // Specular component
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));

    // Combine components and scale by intensity
    return (ambient + diffuse + specular) * lightIntensityScale;
}

void main() {
  
  // Normalize the normal and view direction vectors
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);


  // Calculate lighting
  vec3 lighting = vec3(0.0);
  for(int i = 0; i < numLights; i++) {
      lighting += CalcPointLight(lights[i], norm, aPos, viewDir);
  }


  // Fetch texture colors
  vec4 texColor1 = texture(first_texture, aTexCoord);
  vec4 texColor2 = texture(second_texture, movingTexCoord);


  // Apply lighting to both textures
  vec4 litTexColor1 = vec4(lighting, 1.0) * texColor1;
  

  // Enhance the brightness of the second texture (e.g., snow) before applying lighting
  vec4 enhancedSnow = vec4(texColor2.rgb * 1.3, texColor2.a);
  vec4 litTexColor2 = vec4(lighting, 1.0) * enhancedSnow;


  // Mix the two lit textures with an adjusted blend factor
  fragColor = mix(litTexColor1, litTexColor2, 1f);
}
