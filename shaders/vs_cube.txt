#version 330 core

layout (location = 0) in vec3 aPos;       // Vertex position
layout (location = 1) in vec3 aNormal;    // Vertex normal
layout (location = 2) in vec2 aTexCoord;  // Texture coordinate

out vec3 FragPos;                         // Position to pass to fragment shader
out vec3 Normal;                          // Normal to pass to fragment shader
out vec2 TexCoord;                        // Texture coordinate to pass to fragment shader

uniform mat4 model;                       // Model matrix
uniform mat4 view;                        // View matrix
uniform mat4 projection;                  // Projection matrix

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));      // Calculate the world position of the vertex
    Normal = mat3(transpose(inverse(model))) * aNormal;  // Transform the normal to world space
    TexCoord = aTexCoord;                            // Pass the texture coordinate

    gl_Position = projection * view * model * vec4(aPos, 1.0); // Calculate the final position
}
